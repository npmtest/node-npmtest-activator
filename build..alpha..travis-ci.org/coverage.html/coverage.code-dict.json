{"/home/travis/build/npmtest/node-npmtest-activator/test.js":"/* istanbul instrument in package npmtest_activator */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-activator/lib.npmtest_activator.js":"/* istanbul instrument in package npmtest_activator */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_activator = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_activator = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-activator/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-activator && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_activator */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_activator\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_activator.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_activator.rollup.js'] =\n            local.assetsDict['/assets.npmtest_activator.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_activator.__dirname +\n                    '/lib.npmtest_activator.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-activator/node_modules/activator/lib/activator.js":"/*jslint node:true, nomen:true */\n/*jshint unused:vars */\n\n// with defaults\nvar async = require('async'), smtp = require('./mailer'), _ = require('lodash'), mailer, attachments,\nrparam = require('./params'), jwt = require('jsonwebtoken'),\nsignkey,\ngetObjectProperty = function(object, property) {\n\tvar propertyPath = property.split('.'), current = object;\n\twhile (propertyPath.length > 0) {\n\t\tcurrent = current[propertyPath.shift()];\n\t\tif (!current) {return;}\n\t}\n\treturn current;\n},\nDEFAULTS = {\n\tmodel: {find: function(user,cb){cb(\"uninitialized\");}, save: function(id,data,cb){cb(\"uninitialized\");}, generate: null },\n\ttransport: \"smtp://localhost:465/activator.net/\",\n\tresetExpire: 60,\n\tproto: \"https://\",\n\temailProperty: \"email\",\n\tfrom: \"help@activator.net\",\n\tstyliner: false,\n\tattachments: {},\n\tidProperty: \"id\",\n\tsendPasswordResetComplete: false\n},\nmodel = DEFAULTS.model, \ntransport, \nfrom,\ntemplates,\nemailProperty,\nidProperty,\nsendPasswordResetComplete,\nresetExpire, proto,\ngetAuthCode = function (req) {\n\t// first check for Authorization header\n\tvar ret, header = req.headers.Authorization || req.headers.authorization, lparam = req.param(\"authorization\"),\n\tuparam = req.param(\"Authorization\");\n\tif (header) {\n\t\tret = (header.match(/^Bearer\\s+(\\S+)$/) || [])[1];\n\t} else  {\n\t\tret = lparam || uparam;\n\t}\n\treturn ret;\t\n},\ncreateActivate = function (req,done) {\n\t// add the activation code using JSON Web Tokens\n\tvar id = (req.activator?req.activator.id:null) || (req.user?req.user.id:null);\n\tif (!id) {\n\t\tdone(500,\"uninitialized\");\n\t} else {\n\t\tasync.waterfall([\n\t\t\tfunction(cb) {\n\t\t\t\tmodel.find(id,cb);\n\t\t\t},\n\t\t\tfunction(res,cb){\n\t\t\t\tif (!res) {\n\t\t\t\t\tcb(404);\n\t\t\t\t} else {\n\t\t\t\t\tvar email = getObjectProperty(res, emailProperty),\n\t\t\t\t\tid = getObjectProperty(res,idProperty),\n\t\t\t\t\tcode = jwt.sign({sub:email,purpose:\"activation\"},signkey,{algorithm:\"HS256\"});\n\t\t\t\t\tif (!email) {\n\t\t\t\t\t\tcb(\"missingemail\");\n\t\t\t\t\t} else if (!id) {\n\t\t\t\t\t\tcb(404);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmailer(\"activate\",req.lang||\"en_US\",{code:code,authentication:code,email:email,id:id,request:req},from,email,attachments.activate,cb);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t],function (err) {\n\t\t\tvar code = 400;\n\t\t\tif (err) {\n\t\t\t\tif (err === 404) {\n\t\t\t\t\tcode = 404;\n\t\t\t\t} else if (err === \"uninitialized\") {\n\t\t\t\t\tcode = 500;\n\t\t\t\t}\n\t\t\t\tdone(code,err);\n\t\t\t} else {\n\t\t\t\tdone(201,req.activator?req.activator.body:undefined);\n\t\t\t}\n\t\t});\n\t}\n},\ncompleteActivate = function (req,done) {\n\tvar code = getAuthCode(req), id = req.param(\"user\");\n\n\tasync.waterfall([\n\t\tfunction (cb) {model.find(id,cb);},\n\t\tfunction (res,cb) {\n\t\t\tif (!res) {\n\t\t\t\tcb(404);\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tvar decoded = jwt.verify(code,signkey,{algorithms:\"HS256\"});\n\t\t\t\t\tif (decoded.purpose !== \"activation\") {\n\t\t\t\t\t\tthrow new Error(\"invalid purpose\");\n\t\t\t\t\t}\n\t\t\t\t\tif (decoded.sub !== getObjectProperty(res, emailProperty)) {\n\t\t\t\t\t\tthrow new Error(\"invalidactivationcode\");\n\t\t\t\t\t}\n\t\t\t\t\tmodel.activate(idProperty?getObjectProperty(res, idProperty):id,cb);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tcb(\"invalidcode\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t],function (err) {\n\t\tvar code = 400;\n\t\tif (err) {\n\t\t\tif (err === 404) {\n\t\t\t\tcode = 404;\n\t\t\t} else if (err === \"uninitialized\") {\n\t\t\t\tcode = 500;\n\t\t\t}\n\t\t\tdone(code,err);\n\t\t} else {\n\t\t\tdone(200);\n\t\t}\n\t});\t\n},\ncreatePasswordReset = function (req,done) {\n\t/*\n\t * process:\n\t * 1) get the user by email\n\t * 2) create a random reset code\n\t * 3) save it\n\t * 4) send an email\n\t */\n\tasync.waterfall([\n\t\tfunction (cb) {model.find(req.param(\"user\"),cb);},\n\t\tfunction (res,cb) {\n\t\t\tif (!res || res.length < 1) {\n\t\t\t\tcb(404);\n\t\t\t} else {\n\t\t\t\tvar email = getObjectProperty(res, emailProperty),\n\t\t\t\tid = idProperty?getObjectProperty(res, idProperty):res.id,\n\t\t\t\treset_code = jwt.sign({sub:email,purpose:\"resetpassword\"},signkey,{algorithm:\"HS256\"});\n\t\t\t\tmailer(\"passwordreset\",req.lang||\"en_US\",{code:reset_code,authorization:reset_code,email:email,id:id,request:req},from,email,attachments.passwordreset,cb);\n\t\t\t}\n\t\t}\n\t],function (err) {\n\t\tvar code = 400;\n\t\tif (err) {\n\t\t\tif (typeof(err) === 'number') {\n\t\t\t\tcode = err;\n\t\t\t} else if (err === \"uninitialized\" || err === \"baddb\") {\n\t\t\t\tcode = 500;\n\t\t\t}\n\t\t\tdone(code,err);\n\t\t} else {\n\t\t\tdone(201);\n\t\t}\n\t});\t\n},\ncompletePasswordReset = function (req,done) {\n\tvar reset_code = getAuthCode(req), id = req.param(\"user\"), user, now = Math.floor(new Date().getTime()/1000), newpass;\n\tasync.waterfall([\n\t\tfunction (cb) {model.find(id,cb);},\n\t\tfunction (res,cb) {\n\t\t\tvar password;\n\t\t\tif (!res) {\n\t\t\t\tcb(404);\n\t\t\t} else {\n\t\t\t\tuser = res;\n\t\t\t\t/*\n\t\t\t\t * Generate a password for the given user if function provided\n\t\t\t\t */\n\t\t\t\tpassword = typeof(model.generate) === \"function\" ? model.generate() : req.param(\"password\");\n\n\t\t\t\tif (!password) {\n\t\t\t\t\tcb(\"missingpassword\");\n\t\t\t\t} else {\n\t\t\t\t\tcb(null,res,password);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tfunction (res,password,cb) {\n\t\t\tif (typeof(model.validatePassword) === \"function\") {\n\t\t\t\t// validate the password\n\t\t\t\tvar args = model.validatePassword.length;\n\t\t\t\n\t\t\t\t// first determine if this is synchronous or async\n\t\t\t\tif (args === 1 && model.validatePassword(password) !== true) {\n\t\t\t\t\t/* Password fails validation */\n\t\t\t\t\tcb(\"badpassword\");\n\t\t\t\t} else if (args === 2) {\n\t\t\t\t\tmodel.validatePassword(password,function (err,data) {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\tcb(err);\n\t\t\t\t\t\t} else if (data !== true) {\n\t\t\t\t\t\t\tcb(\"badpassword\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcb(null,res,password);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tcb(null,res,password);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcb(null,res,password);\n\t\t\t}\n\t\t},\n\t\tfunction (res,password,cb) {\n\t\t\ttry {\n\t\t\t\tvar decoded = jwt.verify(reset_code,signkey,{algorithms:\"HS256\"});\n\t\t\t\tif (decoded.purpose !== \"resetpassword\" || decoded.sub !== getObjectProperty(res, emailProperty)) {\n\t\t\t\t\tthrow new Error(\"invalidresetcode\");\n\t\t\t\t} else if (decoded.iat < now - resetExpire*60) {\n\t\t\t\t\tthrow new Error(\"expiredresetcode\");\n\t\t\t\t}\n\t\t\t\tnewpass = password;\n\t\t\t\tmodel.setPassword(idProperty?getObjectProperty(res, idProperty):id,password,cb);\n\t\t\t} catch (e) {\n\t\t\t\tcb(e);\n\t\t\t}\n\t\t},\n\t\tfunction (res,cb) {\n\t\t\tif (sendPasswordResetComplete) {\n\t\t\t\tmailer(\"passwordresetcomplete\",req.lang||\"en_US\",{email:user.email,id:id,password:newpass,request:req},from,user.email,attachments.passwordresetcomplete,cb);\n\t\t\t} else {\n\t\t\t\tcb(null);\n\t\t\t}\n\t\t}\n\t],function (err) {\n\t\tvar code = 400;\n\t\tif (err) {\n\t\t\tif (err === 404) {\n\t\t\t\tcode = 404;\n\t\t\t} else if (err === \"uninitialized\") {\n\t\t\t\tcode = 500;\n\t\t\t}\n\t\t\tdone(code,err);\n\t\t} else {\n\t\t\tdone(200);\n\t\t}\n\t});\t\n};\n\nmodule.exports = {\n\tinit: function (config) {\n\t\tmodel = config.user || DEFAULTS.model;\n\t\ttransport = config.transport || DEFAULTS.transport;\n\t\ttemplates = config.templates || function(type,lang,callback){callback(null);};\n\t\tresetExpire = config.resetExpire || DEFAULTS.resetExpire;\n\t\tproto = config.protocol || DEFAULTS.proto;\n\t\tmailer = smtp(transport,templates, config.styliner || DEFAULTS.styliner);\n\t\tattachments = config.attachments || DEFAULTS.attachments;\n\t\temailProperty = config.emailProperty || DEFAULTS.emailProperty;\n\t\tfrom = config.from || DEFAULTS.from;\n\t\tidProperty = config.id || DEFAULTS.idProperty;\n\t\tsignkey = config.signkey;\n\t\tsendPasswordResetComplete = config.sendPasswordResetComplete || DEFAULTS.sendPasswordResetComplete;\n\t},\n\tcreatePasswordReset: function (req,res,next) {\n\t\trparam(req);\n\t\tcreatePasswordReset(req,function (code,message) {\n\t\t\tif (message === null || message === undefined || (typeof(message) === \"number\" && message === code)) {\n\t\t\t\tres.sendStatus(code);\n\t\t\t} else {\n\t\t\t\tres.status(code).send(message);\n\t\t\t}\n\t\t});\n\t},\n\tcreatePasswordResetNext: function (req,res,next) {\n\t\trparam(req);\n\t\tcreatePasswordReset(req,function (code,message) {\n\t\t\treq.activator = req.activator || {};\n\t\t\t_.extend(req.activator,{code:code,message:message});\n\t\t\tnext();\n\t\t});\n\t},\n\tcompletePasswordReset: function (req,res,next) {\n\t\trparam(req);\n\t\tcompletePasswordReset(req,function (code,message) {\n\t\t\tres.status(code).send(message);\n\t\t});\n\t},\n\tcompletePasswordResetNext: function (req,res,next) {\n\t\trparam(req);\n\t\tcompletePasswordReset(req,function (code,message) {\n\t\t\treq.activator = req.activator || {};\n\t\t\t_.extend(req.activator,{code:code,message:message});\n\t\t\tnext();\n\t\t});\n\t},\n\tcreateActivate: function (req,res,next) {\n\t\trparam(req);\n\t\tcreateActivate(req,function (code,message) {\n\t\t\tif (message === null || message === undefined || (typeof(message) === \"number\" && message === code)) {\n\t\t\t\tres.sendStatus(code);\n\t\t\t} else {\n\t\t\t\tres.status(code).send(message);\n\t\t\t}\n\t\t});\n\t},\n\tcreateActivateNext: function (req,res,next) {\n\t\trparam(req);\n\t\tcreateActivate(req,function (code,message) {\n\t\t\treq.activator = req.activator || {};\n\t\t\t_.extend(req.activator,{code:code,message:message});\n\t\t\tnext();\n\t\t});\n\t},\n\tcompleteActivate: function (req,res,next) {\n\t\trparam(req);\n\t\tcompleteActivate(req,function (code,message) {\n\t\t\tres.status(code).send(message);\n\t\t});\n\t},\n\tcompleteActivateNext: function (req,res,next) {\n\t\trparam(req);\n\t\tcompleteActivate(req,function (code,message) {\n\t\t\treq.activator = req.activator || {};\n\t\t\t_.extend(req.activator,{code:code,message:message});\n\t\t\tnext();\n\t\t});\n\t},\n\ttemplates: {\n\t\tfile: require('./filesdriver')\n\t}\n};\n","/home/travis/build/npmtest/node-npmtest-activator/node_modules/activator/lib/mailer.js":"/*jslint node:true, nomen:true */\n\nmodule.exports = function(url, templates, styliner){\n\tvar sendmail = require('./sendmail')(url), mailcomposer = require('./mailcomposer');\n\tmailcomposer.init(templates, styliner);\n\t\n\treturn function(type,lang,data,from,to,attachments,callback) {\n\t\tmailcomposer.compile(type,lang,data,function(subject,text,html){\n\t\t\tif (subject && (text||html)) {\n\t\t\t\tsendmail(from,to,subject,text,html,attachments,callback);\n\t\t\t} else {\n\t\t\t\tcallback(\"missingmailtemplate \"+type);\n\t\t\t}\n\t\t});\t\t\n\t};\n};","/home/travis/build/npmtest/node-npmtest-activator/node_modules/activator/lib/params.js":"/*jslint node:true */\nmodule.exports = function (req) {\n\treq.param = function(name, defaultValue){\n\t\tvar params = this.params || {}, body = this.body || {}, query = this.query || {},\n\t\tret = defaultValue;\n\t\tif (params[name] !== null && params[name] !== undefined && params.hasOwnProperty(name)) {\n\t\t\tret = params[name];\n\t\t} else if (body[name] !== null && body[name] !== undefined) {\n\t\t\tret = body[name];\n\t\t} else if (query[name] !== null && query[name] !== undefined) {\n\t\t\tret = query[name];\n\t\t}\n\t\treturn ret;\n\t};\n};","/home/travis/build/npmtest/node-npmtest-activator/node_modules/activator/lib/filesdriver.js":"/*jslint node:true, nomen:true, unused:vars */\nvar fs = require('fs'), _ = require('lodash'), async = require('async'), PATH = __dirname+'/templates', EXPIRY = 60,\n\n\n// keep a cache of templates\nmails = {};\n\n\nmodule.exports = function (p) {\n\tvar path = p || PATH;\n\t\n\treturn function (type,lang,callback) {\n\t\t// build our list from most specific to least-specific\n\t\tvar now = new Date().getTime(), found = false, list = _.reduce(\n\t\t\t\t(lang||\"\").split('_'),\n\t\t\t\tfunction(result,item){\n\t\t\t\t\tresult.push(  result.length === 0 ? item : [].concat(result[result.length-1],item).join(\"_\") ); \n\t\t\t\t\treturn(result);},\n\t\t\t\t[]).reverse();\n\t\t// default case\n\t\tlist.push(\"\");\n\t\t\n\t\t// need to get the mail from filesystem if not cached already\n\t\t// however, we must be careful of the fallback\n\t\t// e.g. we once sent an email with no matching lang, e.g. he_IL, so the default (item=\"\") was found and cached\n\t\t// now we look for a different lang, e.g. fr_FR. Since we never looked for it, we will not have it in the cache,\n\t\t//   but we *will* have the default (item=\"\"), which would cause us not to look for fr_FR on the filesystem\n\t\t// so it is important that we check not only \"is it in the cache\", but \"did we ever look for it\"\n\t\t// our logic is:\n\t\t// 1- go from most-specific (fr_FR) to less specific (fr) to default (\"\")\n\t\t// 2- with each one, if it is cached use it\n\t\t// 3- if it is not cached but also was not found on the filesystem, go to the next\n\t\t// essentially, we need a system to track which ones we searched for and when\n\t\tmails[type] = mails[type] || {};\n\t\t// look for each type in reverse order\n\t\t_.each(list,function (item) {\n\t\t\t// first, if it is not found at all, then we never searched for it, so go back\n\t\t\tif (!mails[type][item]) {\n\t\t\t\tfound = false;\n\t\t\t\treturn(false);\n\t\t\t} else if (!mails[type][item].notfound && mails[type][item].expired > now) {\n\t\t\t\t// so we searched for it. if it was found and is not expired, used it\n\t\t\t\tfound = mails[type][item];\n\t\t\t\treturn(false);\n\t\t\t}\n\t\t\t// else either it is expired, or it was notfound, so keep looking for the next less-specific down the line\n\t\t});\n\t\t// did we find an answer?\n\t\tif (found) {\n\t\t\tcallback(null,found);\n\t\t} else {\n\t\t\tfs.readdir(path,function (err,files) {\n\t\t\t\tvar actuals = [];\n\t\t\t\tif (err) {\n\t\t\t\t\tcallback(\"missingmailfiles\");\n\t\t\t\t} else {\n\t\t\t\t\t_.each(list,function (item) {\n\t\t\t\t\t\tvar fileName = type+(item?'_'+item:''), txtName = fileName + '.txt', htmlName = fileName + '.html';\n\t\t\t\t\t\tif (_.includes(files,fileName)) {\n\t\t\t\t\t\t\tactuals.push({name:item,type:\"text\",path:path+'/'+fileName});\n\t\t\t\t\t\t} else if (_.includes(files,txtName)) {\n\t\t\t\t\t\t\tactuals.push({name:item,type:\"text\",path:path+'/'+txtName});\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (_.includes(files,htmlName)) {\n\t\t\t\t\t\t\tactuals.push({name:item,type:\"html\",path:path+'/'+htmlName});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\t// actuals now contains the actual file names we have\n\t\t\t\t\tasync.each(actuals,\n\t\t\t\t\t\tfunction(item,cb) {\n\t\t\t\t\t\t\tfs.readFile(item.path,'utf8',function (err,data) {\n\t\t\t\t\t\t\t\tif (data) {\n\t\t\t\t\t\t\t\t\tdata = data.replace(/\\r\\n/g,'\\n');\n\t\t\t\t\t\t\t\t\tdata = data.match(/^([^\\n]*)\\n[^\\n]*\\n((.|\\n)*)/m);\n\t\t\t\t\t\t\t\t\tmails[type][item.name] = mails[type][item.name] || {};\n\t\t\t\t\t\t\t\t\tmails[type][item.name][item.type] = {\n\t\t\t\t\t\t\t\t\t\tsubject: data[1],\n\t\t\t\t\t\t\t\t\t\tcontent: data[2]\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\tmails[type][item.name].expired = now + EXPIRY*60*1000;\n\t\t\t\t\t\t\t\t\tcb();\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tmails[type][item.name] = {\n\t\t\t\t\t\t\t\t\t\tnotfound: true,\n\t\t\t\t\t\t\t\t\t\texpired : now + EXPIRY*60*1000\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\tcb();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t},\n\t\t\t\t\t\tfunction (err) {\n\t\t\t\t\t\t\t// there should be no errors, we should just be complete\n\t\t\t\t\t\t\t_.each(list,function (item) {\n\t\t\t\t\t\t\t\tif (mails[type][item] && mails[type][item].expired > now) {\n\t\t\t\t\t\t\t\t\tfound = mails[type][item];\n\t\t\t\t\t\t\t\t\treturn(false);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t// did we find an answer?\n\t\t\t\t\t\t\tcallback(null,found);\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n};\n\n\n","/home/travis/build/npmtest/node-npmtest-activator/node_modules/activator/lib/mailcomposer.js":"/*jslint node:true, nomen:true, unused:vars */\nvar shouldUseStyliner = false, Styliner = require('styliner'), _ = require('lodash'), templates,\nstyliner = new Styliner('./');\n\nmodule.exports = {\n\tinit : function (templatesDriver, styliner) {\n\t\ttemplates = templatesDriver;\n\t\tshouldUseStyliner = styliner || false;\n\t},\n\tget : function (type,lang,callback) {\n\t\treturn templates(type,lang,callback);\n\t},\n\tcompile: function (type,lang,config,callback) {\n\t\tthis.get(type,lang,function (err,res) {\n\t\t\tlet subjectTemplate, textContentTemplate, htmlContentTemplate;\n\t\t\tif (err) {\n\t\t\t\tcallback(err);\n\t\t\t} else if (!res) {\n\t\t\t\tcallback(null,null);\n\t\t\t} else {\n\t\t\t\t// we have the saved mail template - it might be html or text\n\t\t\t\tsubjectTemplate = _.template((res.text||res.html).subject);\n\t\t\t\ttextContentTemplate = res.text ? _.template(res.text.content) : function () {return null;};\n\t\t\t\thtmlContentTemplate = res.html ? _.template(res.html.content) : function () {return null;};\n\t\t\t\t\n\t\t\t\tif(shouldUseStyliner && res.html) {\n\t\t\t\t\tstyliner.processHTML(htmlContentTemplate(config)).then(function(processedSource) {\n\t\t\t\t\t\tcallback(subjectTemplate(config), textContentTemplate(config), processedSource);\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tcallback(subjectTemplate(config),textContentTemplate(config),htmlContentTemplate(config));\n\t\t\t\t}\n\n\t\t\t}\n\t\t});\n\t}\n};","/home/travis/build/npmtest/node-npmtest-activator/node_modules/activator/lib/sendmail.js":"/*jslint node:true */\nvar mailer = require('nodemailer');\n\n\nmodule.exports = function(turl) {\n  var url, transport, host, port, auth, protocol, sysopts,\n  parts, domain, secure;\n\tif (typeof(turl) === \"string\") {\n\t\turl = require('url').parse(turl||\"\", true);\t  // do we have a proper URL?\n\t  url.protocol = url.protocol || \"smtp:\";\n\t  url.host = url.host || \"localhost\";\n\t  url.port = url.port || \"25\";\n\t  url.path = url.path || \"/localhost\";\n  \n\t  protocol = url.protocol.replace(/:$/,\"\").toUpperCase();\n\t  host = url.host.split(\":\")[0];\n\t  port = parseInt(url.port,10);\n\t  parts = url.path.split(/\\//);\n\t  domain = parts[1];\n\t  secure = url.query.secureConnection || false;\n\t  sysopts = { host: host, port:port, name: domain, secure: secure };\n\t  if (url.auth) {\n\t    auth = url.auth.split(\":\");\n\t    sysopts.auth = {user:auth[0],pass:auth[1]};\n\t  }\n\n\t  // create reusable transport method (opens pool of SMTP connections)\n\t  transport = mailer.createTransport(sysopts);\t\t\n\t} else {\n\t\ttransport = turl;\n\t}\n\n  return function(from,to,subject,text,html,attachments,cb) {\n    var opts = {\n      from: from,\n      to: to,\n      subject: subject\n    };\n\t\tif (text) {\n\t\t\topts.text = text;\n\t\t}\n    if(attachments) {\n\t\t\topts.attachments = attachments;\n\t\t}\n\t\tif (html) {\n\t\t\topts.html = html;\n\t\t}\n    transport.sendMail(opts,cb);\n  };\n};\n"}